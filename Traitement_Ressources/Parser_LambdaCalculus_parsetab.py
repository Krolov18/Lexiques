
# Parser_LambdaCalculus_parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "var axiome : terme  terme : var  terme : '∆' var '.' terme  terme : '(' terme ')' terme "
    
_lr_action_items = {'$end':([1,2,4,10,11,],[0,-1,-2,-3,-4,]),'∆':([0,5,8,9,],[3,3,3,3,]),')':([4,7,10,11,],[-2,9,-3,-4,]),'var':([0,3,5,8,9,],[4,6,4,4,4,]),'(':([0,5,8,9,],[5,5,5,5,]),'.':([6,],[8,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'axiome':([0,],[1,]),'terme':([0,5,8,9,],[2,7,10,11,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> axiome","S'",1,None,None,None),
  ('axiome -> terme','axiome',1,'p_axiom','lambda_calculus.py',50),
  ('terme -> var','terme',1,'p_terme_var','lambda_calculus.py',55),
  ('terme -> ∆ var . terme','terme',4,'p_terme_lambda','lambda_calculus.py',60),
  ('terme -> ( terme ) terme','terme',4,'p_terme_app_func','lambda_calculus.py',68),
]
